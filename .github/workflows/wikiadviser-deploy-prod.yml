name: Deploy Prod
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  approval:
    runs-on: ubuntu-latest
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: baderdean
          minimum-approvals: 1
          issue-title: "Deploy to Prod"
          issue-body: "Please approve or deny the deployment, comment LGTM! or approved to approve | deny or Denied! to deny"

  deploy-wikiadviser:
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - name: Deploy Wikiadviser Prod
        uses: appleboy/ssh-action@master
        env:
          SUPABASE_PROD_PROJECT_URL: ${{ secrets.SUPABASE_PROD_PROJECT_URL }}
          SUPABASE_PROD_SECRET_PROJECT_TOKEN: ${{ secrets.SUPABASE_PROD_SECRET_PROJECT_TOKEN }}

          WIKIADVISER_LANGUAGES: ${{ vars.WIKIADVISER_LANGUAGES }}
          SHARE_LINK_DAY_LIMIT: ${{ vars.SHARE_LINK_DAY_LIMIT }}
          WIKIADVISER_ROOT_DOMAIN: ${{ vars.WIKIADVISER_ROOT_DOMAIN }}
          WIKIADVISER_API_PORT: ${{ vars.WIKIADVISER_API_PORT }}
          MEDIAWIKI_PROD_ENDPOINT: ${{ vars.MEDIAWIKI_PROD_ENDPOINT }}
          WIKIADVISER_FRONTEND_ENDPOINT: ${{ vars.WIKIADVISER_FRONTEND_ENDPOINT }}
          WIKIADVISER_API_ENDPOINT: ${{ vars.WIKIADVISER_API_ENDPOINT }}

          NODE_ENV: ${{vars.NODE_ENV}}

          WIKIPEDIA_PROXY: ${{ vars.WIKIPEDIA_PROXY }}

          MEDIAWIKI_INTERNAL_ENDPOINT: ${{ vars.MEDIAWIKI_INTERNAL_ENDPOINT }}
          MEDIAWIKI_ENDPOINT: ${{ vars.MEDIAWIKI_ENDPOINT }}
          MW_ADMIN_USERNAME: ${{ secrets.MW_ADMIN_USERNAME }}
          MW_ADMIN_PASSWORD: ${{ secrets.MW_ADMIN_PASSWORD }}
          MW_BOT_USERNAME: ${{ secrets.MW_BOT_USERNAME }}
          MW_BOT_PASSWORD: ${{ secrets.MW_BOT_PASSWORD }}

          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

        with:
          host: ${{ vars.WIKIADVISER_PROD_HOST }}
          key: ${{ secrets.SSH_PRIVATE_WIKIADVISER_PROD }}
          username: ${{ secrets.SSH_USERNAME_WIKIADVISER_PROD }}
          envs: MEDIAWIKI_PROD_ENDPOINT,MEDIAWIKI_INTERNAL_ENDPOINT,SUPABASE_PROD_SECRET_PROJECT_TOKEN,MEDIAWIKI_ENDPOINT,SUPABASE_PROD_PROJECT_URL,WIKIADVISER_API_PORT,WIKIPEDIA_PROXY,MW_ADMIN_USERNAME,MW_ADMIN_PASSWORD,MW_BOT_USERNAME,MW_BOT_PASSWORD,WIKIADVISER_ROOT_DOMAIN,SENTRY_DSN,WIKIADVISER_FRONTEND_ENDPOINT,WIKIADVISER_API_ENDPOINT,WIKIADVISER_LANGUAGES,SHARE_LINK_DAY_LIMIT,NODE_ENV

          script: |
            wikiadviser_path="/home/wikiadviser-prod/wikiadviser"

            # Check if the folder exists
            if [ -d "$wikiadviser_path" ]; then
                echo "wikiadviser exists..."
                cd $wikiadviser_path
                git pull
            else
                echo "wikiadviser doesn't exist, Cloning Repo..."
                git clone git@github.com:ankaboot-source/wikiadviser.git $wikiadviser_path
            fi

            cd $wikiadviser_path; docker compose -f docker-compose.prod.yml down; git pull

            echo "SUPABASE_SECRET_PROJECT_TOKEN=$SUPABASE_PROD_SECRET_PROJECT_TOKEN" > $wikiadviser_path/.env
            echo "SUPABASE_PROJECT_URL=$SUPABASE_PROD_PROJECT_URL" >> $wikiadviser_path/.env

            echo "MEDIAWIKI_INTERNAL_ENDPOINT=$MEDIAWIKI_INTERNAL_ENDPOINT" >> $wikiadviser_path/.env
            echo "MEDIAWIKI_ENDPOINT=$MEDIAWIKI_ENDPOINT" >> $wikiadviser_path/.env
            echo "MW_ADMIN_USERNAME=$MW_ADMIN_USERNAME" >> $wikiadviser_path/.env
            echo "MW_ADMIN_PASSWORD=$MW_ADMIN_PASSWORD" >> $wikiadviser_path/.env
            echo "MW_BOT_USERNAME=$MW_BOT_USERNAME" >> $wikiadviser_path/.env
            echo "MW_BOT_PASSWORD=$MW_BOT_PASSWORD" >> $wikiadviser_path/.env

            echo "WIKIADVISER_LANGUAGES=$WIKIADVISER_LANGUAGES" >> $wikiadviser_path/.env
            echo "WIKIADVISER_ROOT_DOMAIN=$WIKIADVISER_ROOT_DOMAIN" >> $wikiadviser_path/.env
            echo "SHARE_LINK_DAY_LIMIT=$SHARE_LINK_DAY_LIMIT" >> $wikiadviser_path/.env
            echo "WIKIADVISER_API_PORT=$WIKIADVISER_API_PORT" >> $wikiadviser_path/.env
            echo "WIKIADVISER_API_ENDPOINT=$WIKIADVISER_API_ENDPOINT" >> $wikiadviser_path/.env
            echo "MEDIAWIKI_PROD_ENDPOINT=$MEDIAWIKI_PROD_ENDPOINT" >> $wikiadviser_path/.env

            echo "WIKIADVISER_FRONTEND_ENDPOINT=$WIKIADVISER_FRONTEND_ENDPOINT" >> $wikiadviser_path/.env         

            echo "WIKIPEDIA_PROXY=$WIKIPEDIA_PROXY" >> $wikiadviser_path/.env
            echo "SENTRY_DSN=$SENTRY_DSN" >> $wikiadviser_path/.env
            echo "NODE_ENV=$NODE_ENV" >> $wikiadviser_path/.env

            docker compose --env-file .env -f docker-compose.prod.yml up -d \
              --build \
              --force-recreate

            # Remove unused images/containers/volumes
            docker system prune -f

  deploy-visual-editor-demo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [fr, en]
        env: [prod]
    steps:
      - name: Deploy VisualEditor
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.MEDIAWIKI_DEMO_HOST }}
          key: ${{ secrets.MEDIAWIKI_DEMO_PRIVATE_SSH }}
          username: ${{ secrets.MEDIAWIKI_DEMO_USERNAME }}
          script: |
            wikiadviser_path="/home/wiki-user/wikiadviser"
            visual_editor_folder_name="MyVisualEditor"
            logo_folder="/docs/icons"
            extensions_base_path="/var/www/wiki-${{ matrix.env }}"

            # Check if the folder exists
            if [ -d "$wikiadviser_path" ]; then
                echo "wikiadviser exists..."
                cd $wikiadviser_path
                git pull
            else
                echo "wikiadviser doesn't exist, Cloning Repo..."
                git clone git@github.com:ankaboot-source/wikiadviser.git $wikiadviser_path
            fi

            # Copy Visual Editor to Extensions
            cp -r $wikiadviser_path/$visual_editor_folder_name /var/www/wiki-${{ matrix.env }}/${{ matrix.lang }}/extensions/

            # Copy logo
            cp -r $wikiadviser_path/$logo_folder /var/www/wiki-${{ matrix.env }}/${{ matrix.lang }}/resources/assets/

            # Run update.php in Maintenance Folder
            # https://www.mediawiki.org/wiki/Manual:Update.php
            cd /var/www/wiki-${{ matrix.env }}/${{ matrix.lang }}/maintenance/
            php update.php --quick
